EXPERIMENT-4.3



const express = require('express');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const PORT = 3000;------------------------------------------------------------> CODE BLOCK



EXPLANAITON:

1. Imports Express.js and body-parser to handle JSON request bodies.

2. Creates an Express app instance.

3. app.use(bodyParser.json()) lets you read req.body in POST requests.

4. Sets the server port to 3000.--------------------------------------------------------> EXPLANAITON BLOCK




const seats = [
    { id: 1, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 2, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 3, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 4, status: 'available', lockedBy: null, lockExpiresAt: null },
    { id: 5, status: 'available', lockedBy: null, lockExpiresAt: null }
];-----------------------------------------------------------------------------------------> CODE BLOCK


EXPLANAITON:

5. seats is an array storing the state of each seat.

6. Each seat has:

id → unique seat number

status → 'available', 'locked', or 'booked'

lockedBy → user ID of the person who locked it

lockExpiresAt → timestamp when the lock expires

7. This is in-memory, so all data is lost when the server restarts.



function cleanExpiredLocks() {
    const now = Date.now();
    seats.forEach(seat => {
        if (seat.status === 'locked' && seat.lockExpiresAt <= now) {
            seat.status = 'available';
            seat.lockedBy = null;
            seat.lockExpiresAt = null;
        }
    });
}------------------------------------------------------------------------------------> CODE BLOCK


EXPLANAITON:

8. Checks every seat for expired locks.

9. If a seat’s status is 'locked' and lockExpiresAt has passed:

10. Resets status to 'available'
---------------------------------------------------------------------------------------> EXPLANAITON BLOCK
11. Clears lockedBy and lockExpiresAt

12. Ensures users can’t lock seats indefinitely.


app.post('/lock', (req, res) => {
    const { seatId, userId } = req.body;
    cleanExpiredLocks();

    const seat = seats.find(s => s.id === seatId);
    if (!seat) return res.status(404).json({ message: 'Seat not found' });

    if (seat.status === 'booked') return res.status(400).json({ message: 'Seat already booked' });
    if (seat.status === 'locked') return res.status(400).json({ message: 'Seat already locked' });

    seat.status = 'locked';
    seat.lockedBy = userId;
    seat.lockExpiresAt = Date.now() + 60000; // 1 minute lock

    res.json({ message: `Seat ${seatId} locked for user ${userId}` });
});------------------------------------------------------------------------------------------>CODE BLOCK



EXPLANAITON:

13. POST /lock locks a seat for a user.

14. Reads seatId and userId from the request body.

15. Finds the seat in the seats array.

16. Returns errors if the seat is already booked, already locked, or doesn’t exist.

17. If available, sets:

status → 'locked'------------------------------------------------------------------------------------------> EXPLANAITON BLOCK

lockedBy → user ID

lockExpiresAt → current time + 1 minute

18. Responds with a confirmation message.





app.post('/confirm', (req, res) => {
    const { seatId, userId } = req.body;
    cleanExpiredLocks();

    const seat = seats.find(s => s.id === seatId);
    if (!seat) return res.status(404).json({ message: 'Seat not found' });

    if (seat.status !== 'locked') return res.status(400).json({ message: 'Seat is not locked' });
    if (seat.lockedBy !== userId) return res.status(403).json({ message: 'You did not lock this seat' });

    seat.status = 'booked';
    seat.lockedBy = null;
    seat.lockExpiresAt = null;

    res.json({ message: `Seat ${seatId} successfully booked by user ${userId}` });
});-----------------------------------------------------------------------------------------------------------> CODE BLOCK



EXPLANAITON:

19. POST /confirm books a seat that was previously locked.

20. Validates:

Seat exists

Seat is currently 'locked'

The user confirming is the same who locked it

If valid, sets:

status → 'booked'

21. Clears lockedBy and lockExpiresAt

22. Returns success message.----------------------------------------------------------------------------->EXPLANAITON BLOCK
